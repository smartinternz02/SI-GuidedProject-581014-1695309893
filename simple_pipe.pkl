from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
from sklearn.metrics import r2_score, mean_absolute_error
import joblib

# Assuming X_train and y_train are your training data
trf = ColumnTransformer([
    ('trf', OneHotEncoder(sparse=False, drop='first'), ['batting_team', 'bowling_team', 'city'])
], remainder='passthrough')

pipe = Pipeline(steps=[
    ('step1', trf),
    ('step2', StandardScaler()),
    ('step3', XGBRegressor(n_estimators=1000, learning_rate=0.2, max_depth=12, random_state=1))
])

pipe.fit(X_train, y_train)

# Save the model to a file using binary mode
joblib.dump(pipe, 'simple_pipe.pkl')
# Load the trained model from the file
pipe = joblib.load('simple_pipe.pkl')

# Now you can use the 'pipe' variable for predictions
result = pipe.predict(input_df)

# Print or use the 'result' variable as needed
print(result)